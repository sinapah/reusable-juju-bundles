#cloud-config
---
package_update: true

packages:
  - python3-pip
  - jq
  - sysstat
  - zsh
  - fzf
  - tox
  - gnome-keyring
  - kitty-terminfo
  - sshfs
  - htop
  - lxd
  - s3cmd
  - tcpdump
  - tmux

snap:
  commands:
    - snap install juju --channel=3.6/candidate
    - snap install --classic --channel=1.33-classic k8s
    - snap install --classic charmcraft
    - snap install --classic rockcraft
    - snap install jhack --channel=latest/stable
    - snap install yq
    - snap install multipass-sshfs
    - snap install --classic just
    - snap install --classic terraform
    - snap install microceph
    - snap refresh
    - snap install --classic go

runcmd:
  - DEBIAN_FRONTEND=noninteractive apt-get remove -y landscape-client landscape-common adwaita-icon-theme humanity-icon-theme
  - DEBIAN_FRONTEND=noninteractive apt-get -y upgrade
  - DEBIAN_FRONTEND=noninteractive apt-get -y autoremove

  - |
    # disable swap
    sysctl -w vm.swappiness=0
    echo "vm.swappiness = 0" | tee -a /etc/sysctl.conf
    swapoff -a

  - |
    # disable unnecessary services
    systemctl disable man-db.timer man-db.service --now
    systemctl disable apport.service apport-autoreport.service  --now
    systemctl disable apt-daily.service apt-daily.timer --now
    systemctl disable apt-daily-upgrade.service apt-daily-upgrade.timer --now
    systemctl disable unattended-upgrades.service --now
    systemctl disable motd-news.service motd-news.timer --now
    systemctl disable bluetooth.target --now
    systemctl disable ua-messaging.service ua-messaging.timer --now
    systemctl disable ua-timer.timer ua-timer.service --now
    systemctl disable systemd-tmpfiles-clean.timer --now

    # Disable IPv6
    echo "net.ipv6.conf.all.disable_ipv6=1" | tee -a /etc/sysctl.conf
    echo "net.ipv6.conf.default.disable_ipv6=1" | tee -a /etc/sysctl.conf
    echo "net.ipv6.conf.lo.disable_ipv6=1" | tee -a /etc/sysctl.conf
    sysctl -p

  - |
    # set right owner to /home/ubuntu directory
    chown ubuntu:ubuntu /home/ubuntu

    # oh-my-zsh + juju plugin
    sudo -u ubuntu sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    sudo -u ubuntu git clone https://github.com/zsh-users/zsh-autosuggestions.git ~ubuntu/.oh-my-zsh/custom/plugins/zsh-autosuggestions
    sudo -u ubuntu git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~ubuntu/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
    sudo -u ubuntu sed -i 's/plugins=(git)/plugins=(fzf git zsh-autosuggestions zsh-syntax-highlighting virtualenv colored-man-pages juju colorize)/g' ~ubuntu/.zshrc
    sudo -u ubuntu echo 'export PATH=$PATH:$HOME/.local/bin' >> ~ubuntu/.zshrc
    sudo -u ubuntu wget -P ~ubuntu/.oh-my-zsh/themes/ https://raw.githubusercontent.com/Abuelodelanada/charm-dev-utils/main/zsh_themes/juju.zsh-theme
    sudo -u ubuntu sed -i 's/ZSH_THEME="robbyrussell"/ZSH_THEME="juju"/g' ~ubuntu/.zshrc

  - |
    # Make sure juju directory is there
    sudo -u ubuntu mkdir -p /home/ubuntu/.local/share/juju

  - |
    # Install goss and kgoss
    sudo -u ubuntu mkdir -p /home/ubuntu/.local/bin/
    sudo -u ubuntu curl -L https://github.com/goss-org/goss/releases/latest/download/goss-linux-amd64 -o /home/ubuntu/.local/bin/goss
    chmod +x /home/ubuntu/.local/bin/goss
    sudo -u ubuntu curl -L https://raw.githubusercontent.com/goss-org/goss/master/extras/kgoss/kgoss -o /home/ubuntu/.local/bin/kgoss
    chmod +x /home/ubuntu/.local/bin/kgoss

  - |
    # change default shell
    sudo chsh -s /bin/zsh ubuntu

  - |
    # setup lxd
    lxd init --auto
    adduser ubuntu lxd

  - |
    # setup microceph
    snap refresh --hold microceph
    microceph cluster bootstrap
    microceph disk add loop,4G,3
    microceph enable rgw --port 8080 --ssl-port 8443
    microceph.radosgw-admin user create --uid=user --display-name=User
    microceph.radosgw-admin key create --uid=user --key-type=s3 --access-key=access-key --secret-key=secret-key
    apt install -y s3cmd

  - |
    # Extract host IP address (for metallb and ck8s load balancer)
    export IPADDR=$(ip -4 -j route get 2.2.2.2 | jq -r '.[0].prefsrc')
    echo "Using IPADDR=$IPADDR"

  - |
    # Setup CK8s (Canonical K8s)
    sudo k8s bootstrap
    sudo k8s status --wait-ready
    sudo k8s enable local-storage
    sudo k8s enable load-balancer
    sudo k8s set load-balancer.l2-mode=true load-balancer.cidrs="${IPADDR}/24"
    sudo k8s status --wait-ready
    sudo  k8s kubectl config view --raw | sudo -u ubuntu /snap/juju/current/bin/juju add-k8s ck8s --client
    sudo -u ubuntu juju bootstrap ck8s
    sudo -u ubuntu juju localhost lxd

final_message: "The system is finally up, after $UPTIME seconds"
